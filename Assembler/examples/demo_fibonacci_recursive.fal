; Fibonacci number generator, recursive

; This thing will be running for a while

; init stack
CMEM
MOV SP, 0xff

B after_function_definition

; fibonacci(n): outputs the nth fibonacci number
fibonacci:
POP R0 ; n

; base case, n == 0 or n == 1
CMP R0, 0
BZ 0f
CMP R0, 1
BZ 1f
B recursive_calls
0:
    MOV R1, 0 ; result
    B fib_return
1:
    MOV R1, 1 ; result
    B fib_return
recursive_calls:

; call fib(n - 1)
DEC R0 ; n - 1
PUSH R0
call_fib R0
POP R1 ; fib(n - 1)
POP R0 ; n - 1

; call fib(n - 2)
DEC R0 ; n - 2
PUSH R1 ; fib(n - 1)
call_fib R0
POP R0 ; fib(n - 2)
POP R1 ; fib(n - 1)
ADD R1, R0, R1 ; fib(n - 1) + fib(n - 2)


fib_return:
POP R0 ; return address
PUSH R1 ; result
B R0

after_function_definition:

#macro call_fib 1
PUSH 9f
PUSH $0
B fibonacci
9:
#endm

call_fib 5
POP R2 ; 5
call_fib 6
POP R3 ; 8
call_fib 7
POP R4 ; 13
call_fib 8
POP R5 ; 21
call_fib 9
POP R6 ; 34
call_fib 10
POP R7 ; 55

